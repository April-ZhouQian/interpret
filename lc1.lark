%%
from lc_ast import *
def append(lst, element):
    lst.append(element)
    return lst
%%
start : lc -> $1
lc  : lc "(" actual_params ")" -> CallFunc($1, $3)
    | lc "(" ")" -> CallFunc($1, "")
    | addsub -> $1
    | "+" lc -> UnaryOp($2, "pos")
    | "-" lc -> UnaryOp($2, "neg")
    | lc ">" lc -> BinOp($1, $3, Var("gt"))
    | lc "<" lc -> BinOp($1, $3, Var("lt"))
    | CNAME "=" lc ->AssignVal($1.value, $3)
    | "func" "(" args ")" "{" stmts "}" -> NamedFunc("", $3, Block($6))
    | "func" "(" ")" "{" stmts "}" -> NamedFunc("", [], Block($5))
    | "if" "(" lc ")" "{" stmts "}" -> IfBlock($3, Block($6), Block([]))
    | "if" "(" lc ")" "{" stmts "}" "else" "{" stmts "}" -> IfBlock($3, Block($6), $10)
    | "while" "(" lc ")" "{" stmts "}" -> WhileBlock($3, Block($6))
    | "return" lc -> Return($2)
    | "func" CNAME "(" args ")" "{" stmts "}" -> NamedFunc($2.value, $4, Block($7))
    | "func" CNAME "(" ")" "{" stmts "}" -> NamedFunc($2.value, [], Block($6))

stmts : lc [";"] -> [$1]
       | stmts lc [";"] -> append($1, $2)

name : CNAME -> $1.value

args :  name  -> [$1]
       | args "," name  -> append($1, $3)

actual_params: atom -> [$1]
             | actual_params "," atom -> append($1, $3)

addsub: muldiv -> $1
        | addsub "+" muldiv -> BinOp($1, $3, Var("add"))
        | addsub "-" muldiv -> BinOp($1, $3, Var("sub"))

muldiv: atom -> $1
        | muldiv "*" atom -> BinOp($1, $3, Var("mul"))
        | muldiv "/" atom -> BinOp($1, $3, Var("div"))
        | muldiv "%" atom -> BinOp($1, $3, Var("mod"))

atom: CNAME    -> Var($1.value)
    | NUMBER   -> NumberVal(eval($1.value))
    | "true"   -> BoolVal(True)
    | "false"  -> BoolVal(False)
    | ESCAPED_STRING -> StringVal(eval($1.value))
    | "(" lc ")" -> $2
    | "{" stmts "}" -> Block($2)
%import common.WS
%import common.ESCAPED_STRING
%import common.CNAME
%import common.NUMBER
%ignore WS