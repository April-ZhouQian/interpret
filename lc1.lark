%%
from lc_ast import *
def append(lst, element):
    lst.append(element)
    return lst
%%
start : lc -> $1
lc  : lc atom  -> Call($1, $2)
    | atom     -> $1

stmts : lc [";"] -> [$1]
       | stmts lc [";"] -> append($1, $2)

atom: CNAME    -> Var($1.value)
    | NUMBER   -> NumberVal(eval($1.value))
    | "true"   -> BoolVal(True)
    | "false"  -> BoolVal(False)
    | "func" "(" CNAME ")" "{" stmts "}" -> NamedFunc("", $3.value, Block($6))
    | ESCAPED_STRING ->StringVal(eval($1.value))
    | "(" lc ")" -> $2
    | CNAME "=" lc ->AssignVal($1.value, $3)
    | "{" stmts "}" -> Block($2)
    | "if" "(" lc ")" "{" stmts "}" -> IfBlock($3, Block($6), Block([]))
    | "if" "(" lc ")" "{" stmts "}" "else" "{" stmts "}" -> IfBlock($3, Block($6), $10)
    | "while" "(" lc ")" "{" stmts "}" -> WhileBlock($3, Block($6))
    | "return" lc -> Return($2)
    | "func" CNAME "(" CNAME ")" "{" stmts "}" -> NamedFunc($2.value, $4.value, Block($7))
%import common.WS
%import common.ESCAPED_STRING
%import common.CNAME
%import common.NUMBER
%ignore WS